圆和正方形的相交问题：

// 第九章作业题
//

#include <iostream>
using namespace std;
#include<cmath>
int main()
{
    double a[6];
    for (int i = 0; i < 6; i++)
        cin >> a[i];
    double l1 = a[4] / 2 + a[5];//边长加半径最小距离
    double l2 = a[4] / sqrt(2) + a[5];//斜向最大距离
    double d1 =fabs ( a[0] - a[2]); double d2 = fabs(a[1] - a[3]);//fabs计算某数的绝对值
    double l = sqrt(d1 * d1 + d2 * d2);
    int p11 = a[0] + a[4] / 2, p12 = a[1] + a[4] / 2;
    int p21 = a[0] - a[4] / 2, p22 = a[1] + a[4] / 2;
    int p31 = a[0] - a[4] / 2, p32 = a[1] - a[4] / 2;
    int p41 = a[0] + a[4] / 2, p42 = a[1] - a[4] / 2;

    double d11 = fabs(p11 - a[2]), d12 = fabs(p12 - a[3]);
    double d21 = fabs(p21 - a[2]), d22 = fabs (p22 - a[3]);
    double d31 = fabs(p31 - a[2]), d32 = fabs(p32 - a[3]);
    double d41 = fabs(p41 - a[2]), d42 = fabs(p42 - a[3]);
    
    double l11 = sqrt(d11 * d11 + d12 * d12);
    double l21 = sqrt(d21 * d21 + d22 * d22);
    double l31 = sqrt(d31 * d31 + d32 * d32);
    double l41 = sqrt(d41 * d41 + d42 * d42);
	//注意，本质问题是和正方形的四个顶点的关系问题！
    double min=l11;
    if (l21 < min)
        min = l21;
    if (l31 < min)
        min = l31;
    if (l41 < min)
        min = l41;
    


    if (l < l1)
    {
        cout << "hh"; return 0;
    }
    if (l >= l2)
    {
        cout << "qq"; return 0;
    }
    if (l >= l1 && l < l2)
    {
        if (a[2]>=p21&&a[2]<=p11)//横坐标在正方形区域里
        {
            if (d2 < l1)//只要纵向距离比坐标纵向小，就相交
                cout << "hh";
            else
                cout << "qq";

            return 0;
        }
        if (a[3]>=p32&&a[3]<=p12)//同理，纵坐标。
        {
            if (d1 < l1)
                cout << "hh";
            else
                cout << "qq";
            return 0;
        }
        if (a[2]<p21 || a[2]>p11 || a[3]<p32 || a[3]>p12)
        {
            if (min < a[5])
                cout << "hh";
            else
                cout << "qq";
            return 0;
        }
        return 0;

    }
    
    

}

对数字，字符，字符串的排序问题：
// 第九章作业题
//

#include <iostream>
using namespace std;
#include<cmath>
int main()
{
    int n1;
    cin >> n1;
    int* a;//注意复习第六章直至数组部分的动态分配内存
    a = new int[n1];
    for (int i = 0; i < n1; i++)
    {
        cin >> a[i];
    }
    
    
    for(int i=0;i<n1;i++)
        for (int j = n1 - 1; j > i; j--)
        {
            if (a[j] < a[j - 1])
            {
                int tmp = a[j];
                a[j] = a[j - 1];
                a[j - 1] = tmp;
            }
        }
    cout << a[0];
    for (int i = 1; i < n1; i++)
        cout << " " << a[i];
    cout << endl;//数字部分排序

    int n2;
    cin >> n2;
    char* b1;
    b1 = new char[n2];//!!!这里是数组大小，但new出来的也得是类型一致。注意要换一个数组名和上面的区分。
    int* b2;
    b2 = new int[n2];

    for (int i = 0; i < n2; i++)
    {
        cin >> b1[i];
       /* b1[i] = b1[i] + 1;*/ //注意，不能在char下直接+1，否则出来的只是下一个字母：ABC——BCD
        b2[i] = b1[i] ;  //在int 类型下，将char赋值给int时，就已经变为ASCII码了。不用+1强制转换。
    }
    for (int i = 0; i < n2; i++)
        for (int j = n2 - 1; j > i; j--)
        {
            if (b2[j] < b2[j - 1])
            {
                int tmp = b2[j];
                b2[j] = b2[j - 1];
                b2[j - 1] = tmp;
            }
        }
    for (int i = 0; i < n2; i++)
        b1[i] = b2[i];//同样的，用数字给char 也转换成了ASCII
    
    cout << b1[0];
    for (int i = 1; i < n2; i++)
        cout << " " << b1[i];
    cout << endl;//字母字符部分排序

    ///*int a = '%' + 1;
    //cout << a;*///这个例子输出98，38说明了对字符，特殊符号加减是可以直接变成数字的。

    int n3;
    cin >> n3;
    string* s;
    s = new string[n3];
    for (int i = 0; i < n3; i++)//说明可以实现对多个字符串的输入
        cin >> s[i];
    
    for (int i = 0; i < n3; i++)
            for (int j = n3 - 1; j > i; j--)//string 类型的直接按照字典序可以进行比较大小。
            {
                if (s[j] < s[j - 1])
                {
                    string tmp = s[j];
                    s[j] = s[j - 1];
                    s[j - 1] = tmp;
                }
            }
        cout << s[0];
        for (int i = 1; i < n3; i++)
            cout << " " << s[i];
        //字符串按顺序输出
}



